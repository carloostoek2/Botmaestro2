"""
Setup handlers for multi-tenant bot configuration.
Guides new admins through the initial setup process.
"""
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from utils.user_roles import is_admin
from utils.menu_manager import menu_manager
from services.tenant_service import TenantService
from keyboards.setup_kb import (
    get_setup_main_kb,
    get_setup_channels_kb,
    get_setup_gamification_kb,
    get_setup_tariffs_kb,
    get_setup_complete_kb,
    get_channel_detection_kb,
    get_setup_confirmation_kb
)
from utils.text_utils import sanitize_text

# Importar menu_factory para crear men√∫s espec√≠ficos si es necesario
from utils.menu_factory import menu_factory 

logger = logging.getLogger(__name__)
router = Router()

class SetupStates(StatesGroup):
    """States for the setup flow."""
    waiting_for_vip_channel = State()
    waiting_for_free_channel = State()
    waiting_for_channel_confirmation = State()
    waiting_for_manual_channel_id = State()
    # M√°s estados si necesitas pasos interactivos para configurar cada elemento
    # Por ahora, estos se manejar√°n con callbacks directos al men√∫ de setup
    # configuring_tariffs = State() 
    # configuring_gamification = State()
    # waiting_for_tariff_details = State()
    # waiting_for_mission_details = State()


@router.message(Command("setup"))
async def start_setup(message: Message, session: AsyncSession):
    """Start the initial setup process for new admins."""
    if not is_admin(message.from_user.id):
        await menu_manager.send_temporary_message(
            message,
            "‚ùå **Acceso Denegado**\n\nSolo los administradores pueden acceder a la configuraci√≥n inicial.",
            auto_delete_seconds=5
        )
        return
    
    tenant_service = TenantService(session)
    init_result = await tenant_service.initialize_tenant(message.from_user.id)
    
    if not init_result["success"]:
        await menu_manager.send_temporary_message(
            message,
            f"‚ùå **Error de Inicializaci√≥n**\n\n{init_result['error']}",
            auto_delete_seconds=10
        )
        return
    
    status = init_result["status"]
    
    if status["basic_setup_complete"]:
        text, keyboard = await menu_factory.create_menu("setup_complete", message.from_user.id, session, message.bot)
        await menu_manager.show_menu(
            message,
            text,
            keyboard,
            session,
            "setup_complete",
            delete_origin_message=True # A√±adido: borrar el comando /setup
        )
    else:
        text, keyboard = await menu_factory.create_menu("setup_main", message.from_user.id, session, message.bot)
        await menu_manager.show_menu(
            message,
            text,
            keyboard,
            session,
            "setup_main",
            delete_origin_message=True # A√±adido: borrar el comando /setup
        )

# -- Canal handlers --
@router.callback_query(F.data == "setup_channels")
async def setup_channels_menu(callback: CallbackQuery, session: AsyncSession):
    """Show channel configuration options."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    # Usar menu_factory para obtener el texto y teclado, si lo tienes definido all√≠
    # O seguir usando el texto fijo y get_setup_channels_kb()
    text, keyboard = await menu_factory.create_menu("setup_channels", callback.from_user.id, session, callback.bot)
    await menu_manager.update_menu(
        callback,
        text,
        keyboard,
        session,
        "setup_channels"
    )
    await callback.answer()

@router.callback_query(F.data == "setup_vip_channel")
async def setup_vip_channel(callback: CallbackQuery, state: FSMContext):
    """Start VIP channel configuration."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    # Es mejor usar menu_manager.update_menu aqu√≠ para mantener el historial
    await menu_manager.update_menu(
        callback,
        "üîê **Configurar Canal VIP**\n\n"
        "Para configurar tu canal VIP, reenv√≠a cualquier mensaje de tu canal aqu√≠. "
        "El bot detectar√° autom√°ticamente el ID del canal.\n\n"
        "**Importante**: Aseg√∫rate de que el bot sea administrador del canal "
        "con permisos para invitar usuarios.",
        get_setup_confirmation_kb("cancel_channel_setup"), # Puedes cambiar este a un teclado espec√≠fico para cancelar el canal
        session=None, # No necesitas session aqu√≠, solo para la vista
        menu_state="setup_vip_channel_prompt" # Nuevo estado para el historial
    )
    
    await state.set_state(SetupStates.waiting_for_vip_channel)
    await callback.answer()

@router.callback_query(F.data == "setup_free_channel")
async def setup_free_channel(callback: CallbackQuery, state: FSMContext):
    """Start free channel configuration."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    await menu_manager.update_menu(
        callback,
        "üÜì **Configurar Canal Gratuito**\n\n"
        "Para configurar tu canal gratuito, reenv√≠a cualquier mensaje de tu canal aqu√≠. "
        "El bot detectar√° autom√°ticamente el ID del canal.\n\n"
        "**Importante**: Aseg√∫rate de que el bot sea administrador del canal "
        "con permisos para aprobar solicitudes de uni√≥n.",
        get_setup_confirmation_kb("cancel_channel_setup"), # Puedes cambiar este a un teclado espec√≠fico para cancelar el canal
        session=None,
        menu_state="setup_free_channel_prompt" # Nuevo estado para el historial
    )
    
    await state.set_state(SetupStates.waiting_for_free_channel)
    await callback.answer()

@router.callback_query(F.data == "setup_both_channels")
async def setup_both_channels(callback: CallbackQuery, session: AsyncSession):
    """Placeholder for configuring both channels."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    # Podr√≠as iniciar un flujo de FSM para ambos, o simplemente redirigir
    # Por simplicidad, volvemos al men√∫ de canales y mostramos un mensaje
    await menu_manager.update_menu(
        callback,
        "üõ†Ô∏è **Configuraci√≥n de Ambos Canales (Pr√≥ximamente)**\n\n"
        "Esta opci√≥n te guiar√° para configurar ambos canales simult√°neamente. "
        "Por ahora, por favor, config√∫ralos individualmente. Gracias.",
        get_setup_channels_kb(),
        session,
        "setup_channels"
    )
    await callback.answer()

# Handlers para procesamiento de canales reenviados/manuales
@router.message(SetupStates.waiting_for_vip_channel)
async def process_vip_channel(message: Message, state: FSMContext, session: AsyncSession):
    """Process VIP channel configuration."""
    if not is_admin(message.from_user.id):
        return
    
    channel_id = None
    channel_title = None
    
    if message.forward_from_chat:
        channel_id = message.forward_from_chat.id
        channel_title = message.forward_from_chat.title
    else:
        # Check if it's a manual ID input
        if message.text and message.text.strip().startswith("-100"): # Los IDs de canal empiezan con -100
             try:
                channel_id = int(message.text.strip())
             except ValueError:
                pass # Se manejar√° como ID inv√°lido
        
        if not channel_id:
            await menu_manager.send_temporary_message(
                message,
                "‚ùå **ID Inv√°lido**\n\nPor favor, reenv√≠a un mensaje del canal o ingresa un ID v√°lido.",
                auto_delete_seconds=5
            )
            return await state.set_state(SetupStates.waiting_for_vip_channel) # Volver a esperar
    
    # Store channel info for confirmation
    await state.update_data(
        channel_type="vip",
        channel_id=channel_id,
        channel_title=channel_title,
        message_to_edit_id=message.message_id # Guarda el ID del mensaje del usuario para posible borrado
    )
    
    title_text = f" ({sanitize_text(channel_title)})" if channel_title else ""
    
    # Enviar un nuevo mensaje con la confirmaci√≥n
    await message.answer(
        f"‚úÖ **Canal VIP Detectado**\n\n"
        f"**ID del Canal**: `{channel_id}`{title_text}\n\n"
        f"¬øEs este el canal correcto?",
        reply_markup=get_channel_detection_kb()
    )
    
    await state.set_state(SetupStates.waiting_for_channel_confirmation)

@router.message(SetupStates.waiting_for_free_channel)
async def process_free_channel(message: Message, state: FSMContext, session: AsyncSession):
    """Process free channel configuration."""
    if not is_admin(message.from_user.id):
        return
    
    channel_id = None
    channel_title = None
    
    if message.forward_from_chat:
        channel_id = message.forward_from_chat.id
        channel_title = message.forward_from_chat.title
    else:
        # Check if it's a manual ID input
        if message.text and message.text.strip().startswith("-100"):
            try:
                channel_id = int(message.text.strip())
            except ValueError:
                pass
        
        if not channel_id:
            await menu_manager.send_temporary_message(
                message,
                "‚ùå **ID Inv√°lido**\n\nPor favor, reenv√≠a un mensaje del canal o ingresa un ID v√°lido.",
                auto_delete_seconds=5
            )
            return await state.set_state(SetupStates.waiting_for_free_channel) # Volver a esperar
    
    # Store channel info for confirmation
    await state.update_data(
        channel_type="free",
        channel_id=channel_id,
        channel_title=channel_title,
        message_to_edit_id=message.message_id
    )
    
    title_text = f" ({sanitize_text(channel_title)})" if channel_title else ""
    
    await message.answer(
        f"‚úÖ **Canal Gratuito Detectado**\n\n"
        f"**ID del Canal**: `{channel_id}`{title_text}\n\n"
        f"¬øEs este el canal correcto?",
        reply_markup=get_channel_detection_kb()
    )
    
    await state.set_state(SetupStates.waiting_for_channel_confirmation)

# Handlers para botones de confirmaci√≥n de canal
@router.callback_query(F.data == "confirm_channel", SetupStates.waiting_for_channel_confirmation)
async def confirm_channel_setup(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Confirm and save channel configuration."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    data = await state.get_data()
    channel_type = data.get("channel_type")
    channel_id = data.get("channel_id")
    channel_title = data.get("channel_title")
    
    if not channel_id:
        await callback.answer("Error: No se encontr√≥ informaci√≥n del canal", show_alert=True)
        return
    
    tenant_service = TenantService(session)
    
    # Configure the channel
    if channel_type == "vip":
        result = await tenant_service.configure_channels(
            callback.from_user.id,
            vip_channel_id=channel_id,
            channel_titles={"vip": channel_title} if channel_title else None
        )
    else:
        result = await tenant_service.configure_channels(
            callback.from_user.id,
            free_channel_id=channel_id,
            channel_titles={"free": channel_title} if channel_title else None
        )
    
    if result["success"]:
        channel_name = "VIP" if channel_type == "vip" else "Gratuito"
        # Volver al men√∫ principal de setup
        text, keyboard = await menu_factory.create_menu("setup_main", callback.from_user.id, session, callback.bot)
        await menu_manager.update_menu(
            callback,
            f"‚úÖ **Canal {channel_name} Configurado**\n\n"
            f"El canal ha sido configurado exitosamente.\n\n"
            f"**Siguiente paso**: {text}", # A√±ade el texto del men√∫ principal
            keyboard,
            session,
            "setup_main"
        )
    else:
        await menu_manager.update_menu( # Usar update_menu en lugar de message.edit_text
            callback,
            f"‚ùå **Error de Configuraci√≥n**\n\n{result['error']}",
            get_setup_channels_kb(),
            session,
            "setup_channels"
        )
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "detect_another", SetupStates.waiting_for_channel_confirmation)
async def detect_another_channel(callback: CallbackQuery, state: FSMContext):
    """Allow user to try detecting another channel."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    data = await state.get_data()
    channel_type = data.get("channel_type")
    
    if channel_type == "vip":
        await menu_manager.update_menu(
            callback,
            "üîê **Reintentar Canal VIP**\n\n"
            "Por favor, reenv√≠a un mensaje de tu canal VIP o ingresa el ID manualmente.",
            get_setup_confirmation_kb("cancel_channel_setup"), # Puedes mejorar este teclado
            session=None,
            menu_state="setup_vip_channel_prompt"
        )
        await state.set_state(SetupStates.waiting_for_vip_channel)
    else:
        await menu_manager.update_menu(
            callback,
            "üÜì **Reintentar Canal Gratuito**\n\n"
            "Por favor, reenv√≠a un mensaje de tu canal Gratuito o ingresa el ID manualmente.",
            get_setup_confirmation_kb("cancel_channel_setup"),
            session=None,
            menu_state="setup_free_channel_prompt"
        )
        await state.set_state(SetupStates.waiting_for_free_channel)
    await callback.answer()

@router.callback_query(F.data == "manual_channel_id", SetupStates.waiting_for_channel_confirmation)
async def manual_channel_id_prompt(callback: CallbackQuery, state: FSMContext):
    """Prompt for manual channel ID input."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    data = await state.get_data()
    channel_type = data.get("channel_type")
    
    await menu_manager.update_menu(
        callback,
        f"üìù **Ingresa el ID del Canal {channel_type.upper()}**\n\n"
        f"Por favor, ingresa el ID num√©rico de tu canal {channel_type}. "
        f"Normalmente empieza con `-100`.",
        get_setup_confirmation_kb("cancel_channel_setup"),
        session=None,
        menu_state="setup_manual_channel_id_prompt"
    )
    await state.set_state(SetupStates.waiting_for_manual_channel_id)
    await callback.answer()

@router.message(SetupStates.waiting_for_manual_channel_id)
async def process_manual_channel_id(message: Message, state: FSMContext, session: AsyncSession):
    """Process manually entered channel ID."""
    if not is_admin(message.from_user.id):
        return
    
    try:
        channel_id = int(message.text.strip())
        if not str(channel_id).startswith("-100"):
            raise ValueError("Invalid channel ID format")
            
        data = await state.get_data()
        channel_type = data.get("channel_type")
        
        # Store channel info for confirmation
        await state.update_data(
            channel_id=channel_id,
            channel_title=None, # Manual input usually means no title initially
            message_to_edit_id=message.message_id
        )
        
        await message.answer(
            f"‚úÖ **ID de Canal {channel_type.upper()} Ingresado**\n\n"
            f"**ID del Canal**: `{channel_id}`\n\n"
            f"¬øEs este el canal correcto?",
            reply_markup=get_channel_detection_kb()
        )
        await state.set_state(SetupStates.waiting_for_channel_confirmation)
        
    except ValueError:
        await menu_manager.send_temporary_message(
            message,
            "‚ùå **ID Inv√°lido**\n\nPor favor, ingresa un ID num√©rico v√°lido para el canal. "
            "Debe empezar con `-100`.",
            auto_delete_seconds=7
        )
        await state.set_state(SetupStates.waiting_for_manual_channel_id) # Volver a esperar
    
# -- Gamification Handlers --
# setup_gamification_menu ya existe

# setup_default_game ya existe

@router.callback_query(F.data == "setup_missions")
async def setup_missions(callback: CallbackQuery, session: AsyncSession):
    """Handle setup missions click."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    # L√≥gica para configurar misiones (puede ser un sub-men√∫, un FSM, o mensaje de info)
    await menu_manager.update_menu(
        callback,
        "üéØ **Configurar Misiones**\n\n"
        "Aqu√≠ podr√°s definir las misiones que tus usuarios pueden completar. "
        "Esto podr√≠a implicar crear nuevas misiones o editar existentes.\n\n"
        "*(Implementaci√≥n futura: Interfaz para crear/editar misiones)*",
        get_setup_gamification_kb(), # Volver al men√∫ de gamificaci√≥n por ahora
        session,
        "setup_missions_info" # Nuevo estado para el historial si es necesario
    )
    await callback.answer()

@router.callback_query(F.data == "setup_badges")
async def setup_badges(callback: CallbackQuery, session: AsyncSession):
    """Handle setup badges click."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    await menu_manager.update_menu(
        callback,
        "üèÖ **Configurar Insignias**\n\n"
        "Define las insignias que tus usuarios pueden ganar por sus logros. "
        "Las insignias a√±aden un elemento de prestigio.\n\n"
        "*(Implementaci√≥n futura: Interfaz para crear/editar insignias)*",
        get_setup_gamification_kb(),
        session,
        "setup_badges_info"
    )
    await callback.answer()

@router.callback_query(F.data == "setup_rewards")
async def setup_rewards(callback: CallbackQuery, session: AsyncSession):
    """Handle setup rewards click."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    await menu_manager.update_menu(
        callback,
        "üéÅ **Configurar Recompensas**\n\n"
        "Establece las recompensas que los usuarios pueden canjear con sus puntos. "
        "Las recompensas motivan la participaci√≥n.\n\n"
        "*(Implementaci√≥n futura: Interfaz para crear/editar recompensas)*",
        get_setup_gamification_kb(),
        session,
        "setup_rewards_info"
    )
    await callback.answer()

@router.callback_query(F.data == "setup_levels")
async def setup_levels(callback: CallbackQuery, session: AsyncSession):
    """Handle setup levels click."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    await menu_manager.update_menu(
        callback,
        "üìä **Configurar Niveles**\n\n"
        "Define los diferentes niveles de progresi√≥n para tus usuarios. "
        "Los niveles otorgan una sensaci√≥n de avance.\n\n"
        "*(Implementaci√≥n futura: Interfaz para crear/editar niveles)*",
        get_setup_gamification_kb(),
        session,
        "setup_levels_info"
    )
    await callback.answer()

# -- Tariff Handlers --
# setup_tariffs_menu ya existe
# setup_basic_tariff ya existe (que tambi√©n crea tarifas "premium" por defecto)

@router.callback_query(F.data == "setup_premium_tariff")
async def setup_premium_tariff(callback: CallbackQuery, session: AsyncSession):
    """Handle setup premium tariff click."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    # Si setup_basic_tariff ya crea tarifas premium, este bot√≥n puede ser redundante
    # O podr√≠as tener una l√≥gica para crear una tarifa premium espec√≠fica aqu√≠.
    # Por ahora, un mensaje informativo.
    await menu_manager.update_menu(
        callback,
        "üëë **Crear Tarifa Premium Espec√≠fica (Pr√≥ximamente)**\n\n"
        "Esta opci√≥n te permitir√° crear una tarifa premium con configuraciones "
        "avanzadas. Por ahora, puedes usar las tarifas b√°sicas y premium por defecto.",
        get_setup_tariffs_kb(),
        session,
        "setup_tariffs"
    )
    await callback.answer()

@router.callback_query(F.data == "setup_custom_tariffs")
async def setup_custom_tariffs(callback: CallbackQuery, session: AsyncSession):
    """Handle setup custom tariffs click."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    await menu_manager.update_menu(
        callback,
        "üéØ **Configuraci√≥n de Tarifas Personalizadas (Pr√≥ximamente)**\n\n"
        "Esta secci√≥n te permitir√° crear tarifas de suscripci√≥n con duraci√≥n, "
        "precio y beneficios personalizados.\n\n"
        "*(Implementaci√≥n futura: Interfaz para crear/editar tarifas)*",
        get_setup_tariffs_kb(),
        session,
        "setup_tariffs"
    )
    await callback.answer()

# -- Completion and Navigation Handlers --
# complete_setup ya existe
# skip_setup ya existe

@router.callback_query(F.data == "setup_guide")
async def show_setup_guide(callback: CallbackQuery, session: AsyncSession):
    """Show setup guide for admin."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    await menu_manager.update_menu(
        callback,
        "üìñ **Gu√≠a de Uso del Bot**\n\n"
        "Aqu√≠ encontrar√°s informaci√≥n detallada sobre c√≥mo usar y configurar tu bot. "
        "Temas:\n"
        "‚Ä¢ Gesti√≥n de usuarios\n"
        "‚Ä¢ Creaci√≥n de contenido\n"
        "‚Ä¢ Marketing y monetizaci√≥n\n\n"
        "*(Implementaci√≥n futura: Contenido de la gu√≠a)*",
        get_setup_complete_kb(), # Puedes tener un teclado espec√≠fico para la gu√≠a si es necesario
        session,
        "setup_guide_info"
    )
    await callback.answer()

@router.callback_query(F.data == "setup_advanced")
async def setup_advanced(callback: CallbackQuery, session: AsyncSession):
    """Handle advanced setup options."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    await menu_manager.update_menu(
        callback,
        "üîß **Configuraci√≥n Avanzada (Pr√≥ximamente)**\n\n"
        "Esta secci√≥n contendr√° opciones avanzadas para la personalizaci√≥n del bot, "
        "integraciones y herramientas de depuraci√≥n.\n\n"
        "*(Implementaci√≥n futura: Opciones avanzadas)*",
        get_setup_complete_kb(),
        session,
        "setup_advanced_info"
    )
    await callback.answer()

# Error handlers and cleanup
# Modificaci√≥n en cancel_setup_action para manejar 'cancel_channel_setup'
@router.callback_query(F.data.startswith("cancel_"))
async def cancel_setup_action(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Cancel current setup action and return to main setup menu."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)

    await state.clear() # Limpiar el estado de FSM

    # Usar menu_factory para el men√∫ principal de setup para consistencia
    text, keyboard = await menu_factory.create_menu("setup_main", callback.from_user.id, session, callback.bot)
    
    await menu_manager.update_menu(
        callback,
        "‚ùå **Acci√≥n Cancelada**\n\n"
        "La configuraci√≥n ha sido cancelada. Puedes intentar nuevamente cuando quieras.\n\n"
        f"**Siguiente paso**: {text}", # A√±ade el texto del men√∫ principal de setup
        keyboard,
        session,
        "setup_main"
    )
    await callback.answer()

# Handler para el bot√≥n "admin_main" en get_setup_complete_kb
@router.callback_query(F.data == "admin_main")
async def navigate_to_admin_main_from_setup(callback: CallbackQuery, session: AsyncSession):
    """Navigate to the main admin panel after setup completion or skip."""
    if not is_admin(callback.from_user.id):
        return await callback.answer("Acceso denegado", show_alert=True)
    
    # Asume que 'admin_main' es un estado de men√∫ reconocido por menu_factory
    text, keyboard = await menu_factory.create_menu("admin_main", callback.from_user.id, session, callback.bot)
    await menu_manager.update_menu(
        callback,
        text,
        keyboard,
        session,
        "admin_main"
    )
    await callback.answer()

